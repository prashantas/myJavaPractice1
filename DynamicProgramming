
####################################################################################################################
####################################################################################################################
####################################################################################################################
1. Min Cost Mtrix  ::::: http://www.geeksforgeeks.org/dynamic-programming-set-6-min-cost-path/ 
Dynamic Programming | Set 6 (Min Cost Path)
Given a cost matrix cost[][] and a position (m, n) in cost[][], write a function that returns cost of minimum cost path to reach (m, n)
from (0, 0). Each cell of the matrix represents a cost to traverse through that cell. Total cost of a path to reach (m, n) is sum of all
the costs on that path (including both source and destination). You can only traverse down, right and diagonally lower cells from a
given cell, i.e.,from a given cell (i, j), cells (i+1, j), (i, j+1) and (i+1, j+1) can be traversed. You may assume that all costs are 
positive integers.
1) Optimal Substructure
The path to reach (m, n) must be through one of the 3 cells: (m-1, n-1) or (m-1, n) or (m, n-1). So minimum cost to reach (m, n)
can be written as “minimum of the 3 cells plus cost[m][n]”.
minCost(m, n) = min (minCost(m-1, n-1), minCost(m-1, n), minCost(m, n-1)) + cost[m][n]

/* A Naive recursive implementation of MCP(Minimum Cost Path) problem */
#include<stdio.h>
#include<limits.h>
#define R 3
#define C 3
 
int min(int x, int y, int z);
 
/* Returns cost of minimum cost path from (0,0) to (m, n) in mat[R][C]*/
int minCost(int cost[R][C], int m, int n)
{
   if (n < 0 || m < 0)
      return INT_MAX;
   else if (m == 0 && n == 0)
      return cost[m][n];
   else
      return cost[m][n] + min( minCost(cost, m-1, n-1),
                               minCost(cost, m-1, n), 
                               minCost(cost, m, n-1) );
}
 
/* A utility function that returns minimum of 3 integers */
int min(int x, int y, int z)
{
   if (x < y)
      return (x < z)? x : z;
   else
      return (y < z)? y : z;
}
 
/* Driver program to test above functions */
int main()
{
   int cost[R][C] = { {1, 2, 3},
                      {4, 8, 2},
                      {1, 5, 3} };
   printf(" %d ", minCost(cost, 2, 2));
   return 0;
}

It should be noted that the above function computes the same subproblems again and again.

/* Dynamic Programming implementation of MCP problem */
#include<stdio.h>
#include<limits.h>
#define R 3
#define C 3
 
int min(int x, int y, int z);
 
int minCost(int cost[R][C], int m, int n)
{
     int i, j;
 
     // Instead of following line, we can use int tc[m+1][n+1] or 
     // dynamically allocate memoery to save space. The following line is
     // used to keep te program simple and make it working on all compilers.
     int tc[R][C];  
 
     tc[0][0] = cost[0][0];
 
     /* Initialize first column of total cost(tc) array */
     for (i = 1; i <= m; i++)
        tc[i][0] = tc[i-1][0] + cost[i][0];
 
     /* Initialize first row of tc array */
     for (j = 1; j <= n; j++)
        tc[0][j] = tc[0][j-1] + cost[0][j];
 
     /* Construct rest of the tc array */
     for (i = 1; i <= m; i++)
        for (j = 1; j <= n; j++)
            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j];
 
     return tc[m][n];
}
 
/* A utility function that returns minimum of 3 integers */
int min(int x, int y, int z)
{
   if (x < y)
      return (x < z)? x : z;
   else
      return (y < z)? y : z;
}
 
/* Driver program to test above functions */
int main()
{
   int cost[R][C] = { {1, 2, 3},
                      {4, 8, 2},
                      {1, 5, 3} };
   printf(" %d ", minCost(cost, 2, 2));
   return 0;
}

Time Complexity of the DP implementation is O(mn) which is much better than Naive Recursive implementation.
###################################################################################################################################
##################################################################################################################################
https://www.hackerearth.com/notes/dynamic-programming-i-1/

Let's try to understand this by taking an example of Fibonacci numbers.

Fibonacci (n) = 1; if n = 0
Fibonacci (n) = 1; if n = 1
Fibonacci (n) = Fibonacci(n-1) + Fibonacci(n-2)
So, the first few numbers in this series will be: 1, 1, 2, 3, 5, 8, 13, 21... and so on!

A code for it using pure recursion:

int fib (int n) {
    if (n < 2)
        return 1;
    return fib(n-1) + fib(n-2);
}
Using Dynamic Programming approach with memoization:

void fib () {
    fibresult[0] = 1;
    fibresult[1] = 1;
    for (int i = 2; i<n; i++)
       fibresult[i] = fibresult[i-1] + fibresult[i-2];
}

$$$$$$$$$$$$$$$$$
$$$$$$$$$$$$$$$$$
Say we want to obtain the n-th fibonacci number.
The series goes like this 0, 1, 1, 2, 3, 5, 8, 13 and so on. We know that the 0th entry is 0 and the 1st entry is 1.

We could do the following.

int fib[maxn];  
fib[ 0 ] = 0;  
fib[ 1 ] = 1;  
for (int i = 2; i <= n; i++) {  
    fib[i] = fib[i - 1] + fib[i - 2];  
}

Lets try recursive approach.
Because recursive definitions are so much more intuitive and elegant than iterative solutions, in most cases at least! 
Let’s try to solve the same problem as we did before with a recursive approach instead.

int fib[maxn+1];  
for(int i=0;i<=n;i++ )
{
   fib[i] = -1;
}
int solve(int n) {  
    if (n == 0 || n == 1) {    // base conditions  
        return fib[n] = n;  
    }  
    if (fib[n] != -1) {    // if memoized then return the value  
        return fib[n];  
    }  
    return fib[n] = solve(n - 1) + solve(n - 2);    // recursive definition  
}
************************************************************************************************************
***********************************************************************************************************
Let's look at a sample problem:

Let us say that you are given a number N, you've to find the number of different ways to write it as the sum of 1, 3 and 4.
For example, if N = 5, the answer would be 6.

1 + 1 + 1 + 1 + 1
1 + 4
4 + 1
1 + 1 + 3
1 + 3 + 1
3 + 1 + 1
Sub-problem: DPn be the number of ways to write N as the sum of 1, 3, and 4.
Finding recurrence: Consider one possible solution, n = x1 + x2 + ... xn. If the last number is 1, the sum of the remaining numbers
should be n - 1. So, number of sums that end with 1 is equal to DPn-1.. Take other cases into account where the last number is 3 and 4.
The final recurrence would be:

DPn = DPn-1 + DPn-3 + DPn-4.
Take care of the base cases. DP0 = DP1 = DP2 = 1, and DP3 = 2.
Implementation:

DP[0] = DP[1] = DP[2] = 1; DP[3] = 2;
for (i = 4; i <= n; i++) {
  DP[i] = DP[i-1] + DP[i-3] + DP[i-4];
}
The technique above, takes a bottom up approach and uses memoization to not compute results that have already been computed.

NB::::::: DPn be the number of ways to write N as the sum of 1, 3, and 4.
DP0 = 1(0) + 3(0) + 4(0) ======1 WAY.
DP1 = 1(1) + 3(0) + 4(0) ======1 WAY.
DP2 = 1(2) + 3(0) + 4(0) ======1 WAY.
DP3 = 1(3) + 3(0) + 4(0) ||||||||DP3 = 1(0) + 3(1) + 4(0) ======2 WAY.
***********************************************************************************************************************************
************************************************************************************************************************************
"Imagine you have a collection of N wines placed next to each other on a shelf. For simplicity, let's number the wines from left to 
right as they are standing on the shelf with integers from 1 to N, respectively. The price of the ith wine is pi. (prices of different
wines can be different).Because the wines get better every year, supposing today is the year 1, on year y the price of the ith wine 
will be y*pi, i.e. y-times the value that current year.You want to sell all the wines you have, but you want to sell exactly one wine
per year, starting on this year. One more constraint - on each year you are allowed to sell only either the leftmost or the rightmost
wine on the shelf and you are not allowed to reorder the wines on the shelf (i.e. they must stay in the same order as they are in 
the beginning).You want to find out, what is the maximum profit you can get, if you sell the wines in optimal order?"

For Reference see :::: https://www.hackerearth.com/notes/dynamic-programming-i-1/

int p[N]  // readOnly array of wine prices
// year represents the current year ( starts with 1 )
// [ be, en ] represents the interval of the unsold wines on the shelf

int profit( int year, int be, int en )
{
	// there are no more wines on the shelf
	if(be > en )
		return 0;
	// try to sell the leftmost or rightmost wine, recursively calculate the
	// answer and return the better one

	return max(
		profit(year+1, be+1,en) + year * p[be],
		profit(year+1, be, en-1)+ year * p[en]
	)
}

This solution simply tries all the possible valid orders of selling the wines. If there are N wines in the beginning, 
it will try 2N(2 power N )  possibilities (each year we have 2 choices). So even though now we get the correct answer, 
the time complexity of the algorithm grows exponentially.

The best solution is ::::

int N; // read-only number of wines in the beginning
int p[N]; // read-only array of wine prices
int cache[N][N]; // all values initialized to -1 (or anything you choose)

    int profit(int be, int en) {
      if (be > en)
        return 0;
     // these two lines save the day
      if (cache[be][en] != -1)
        return cache[be][en];
        
      // year is equivalent to the number of wines we have already sold plus one, which is equivalent to the total number 
      // of wines from the beginning minus the number of wines we have not sold plus one.  
      //  (en-be+1) is the number of unsold wines
      int year = N - (en-be+1) + 1;
      
      // when calculating the new answer, don't forget to cache it
      return cache[be][en] = max(
        profit(be+1, en) + year * p[be],
        profit(be, en-1) + year * p[en]);
    }
    
    *************************************************************************************************************************
    ************************************************************************************************************************
